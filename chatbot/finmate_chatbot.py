# -*- coding: utf-8 -*-
"""FinMate Chatbot Updated.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Oql5mcocyDN5Dj6WzB20lH9bim1D64xl
"""

# ‚úÖ Step 1: Install Dependencies
!pip install transformers accelerate bitsandbytes
!pip install SpeechRecognition pydub pyttsx3

# ‚úÖ Step 2: Import Modules
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM, pipeline, BitsAndBytesConfig, AutoModelForSeq2SeqLM
import speech_recognition as sr
import pyttsx3
from pydub import AudioSegment
from pydub.playback import play
# import os

# ‚úÖ Step 3: Load Model
def load_chatbot():
    print("üîÅ Loading FinMate chatbot model...")
    model_id = "openchat/openchat-3.5-0106"
        # ‚úÖ 4-bit quantization config
    bnb_config = BitsAndBytesConfig(
        load_in_4bit=True,
        bnb_4bit_use_double_quant=True,
        bnb_4bit_quant_type="nf4",
        bnb_4bit_compute_dtype=torch.float16
    )

    # ‚úÖ Load tokenizer
    tokenizer = AutoTokenizer.from_pretrained(model_id)

    # ‚úÖ Load model with quantization
    model = AutoModelForCausalLM.from_pretrained(
        model_id,
        device_map="auto",
        quantization_config=bnb_config,
        torch_dtype=torch.float16
    )

    # bnb_config = BitsAndBytesConfig(load_in_8bit=True)

    # tokenizer = AutoTokenizer.from_pretrained(model_id)
    # model = AutoModelForCausalLM.from_pretrained(
    #     model_id,
    #     device_map="auto",
    #     quantization_config=bnb_config,
    #     torch_dtype=torch.float16 if torch.cuda.is_available() else torch.float32
    # )
    pipe = pipeline("text-generation", model=model, tokenizer=tokenizer, max_new_tokens=512)
    print("‚úÖ FinMate is ready!")
    return pipe, model, tokenizer

chatbot, model, tokenizer = load_chatbot()

# ‚úÖ Step 4: Define Chat Logic
def generate_response(user_input):
    system_prompt = (
        "You are FinMate, a financial assistant. "
        "You only answer finance-related questions like saving, budgeting, investing, and money management. "
        "If the user asks anything unrelated to finance (e.g. politics, history, sports), politely refuse to answer."
    )

    prompt = f"<|system|>\n{system_prompt}</s>\n<|user|>\n{user_input}</s>\n<|assistant|>"

    inputs = tokenizer(user_input, return_tensors="pt").to(model.device)

    output = model.generate(
        inputs["input_ids"],
        max_new_tokens=256,
        temperature=0.7,
        top_p=0.9,
        do_sample=True,
        repetition_penalty=1.1
    )

    decoded = tokenizer.decode(output[0], skip_special_tokens=True)
    # Extract only assistant's final response
    return decoded.split("<|assistant|>")[-1].strip()

# ‚úÖ Step 5a: Text-based Chat
def chat_text():
    print("üí¨ Text-based FinMate Chatbot. Type 'exit' to quit.")
    while True:
        user_input = input("You: ")
        if user_input.lower() == "exit":
            print("üëã Goodbye!")
            break
        response = generate_response(user_input)
        print(f"ü§ñ FinMate: {response}")

# ‚úÖ Step 5b: Voice-based Chat
def chat_voice():
    recognizer = sr.Recognizer()
    engine = pyttsx3.init()
    engine.setProperty('rate', 160)

    print("üé§ Voice-based FinMate Chatbot. Say 'exit' to quit.")

    while True:
        with sr.Microphone() as source:
            print("üéôÔ∏è Listening...")
            audio = recognizer.listen(source)

        try:
            user_query = recognizer.recognize_google(audio)
            print(f"You (voice): {user_query}")

            if "exit" in user_query.lower():
                print("üëã Exiting FinMate Voice Chat.")
                break

            response = generate_response(user_query)
            print(f"ü§ñ FinMate: {response}")

            engine.say(response)
            engine.runAndWait()

        except sr.UnknownValueError:
            print("‚ùå Sorry, I could not understand your voice.")
        except sr.RequestError as e:
            print(f"‚ö†Ô∏è API error: {e}")

# ‚úÖ Step 6: Choose Mode
print("\nüëã Welcome to FinMate - Your Financial Chatbot")
print("Choose interaction mode:\n1. Text Chat\n2. Voice Chat")
choice = input("Enter 1 or 2: ").strip()

if choice == "1":
    chat_text()
elif choice == "2":
    chat_voice()
else:
    print("‚ùå Invalid choice. Exiting.")